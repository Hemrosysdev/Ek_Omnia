///////////////////////////////////////////////////////////////////////////////
///
/// @file LibraryRecipe.cpp
///
/// @brief Implementation file of class LibraryRecipe.
///
/// @author Ultratronik GmbH
///         Dornierstr. 9
///         D-82205 Gilching
///         Germany
///         http://www.ultratronik.de
///
/// @author written by Florian Sonntag, Forschung & Entwicklung, fsonntag@ultratronik.de
///
/// @date 31.03.2021
///
/// @copyright Copyright 2021 by Hemro International AG
///            Hemro International AG
///            Länggenstrasse 34
///            CH 8184 Bachenbülach
///            Switzerland
///            Homepage: www.hemrogroup.com
///
///////////////////////////////////////////////////////////////////////////////

#include "LibraryRecipe.h"
#include "DddDriver.h"

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

LibraryRecipe::LibraryRecipe( bool      bPersisted,
                              QObject * parent )
    : QObject( parent )
    , m_bPersisted( bPersisted )
{
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

LibraryRecipe::~LibraryRecipe() = default;

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

QString LibraryRecipe::uuid() const
{
    return m_strUuid;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void LibraryRecipe::setUuid( const QString & strUuid )
{
    if ( m_strUuid != strUuid )
    {
        m_strUuid = strUuid;
        Q_EMIT uuidChanged();
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

bool LibraryRecipe::persisted() const
{
    return m_bPersisted;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void LibraryRecipe::setPersisted( bool bPersisted )
{
    if ( m_bPersisted != bPersisted )
    {
        m_bPersisted = bPersisted;
        Q_EMIT persistedChanged();
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

int LibraryRecipe::grindingSize() const
{
    return m_nGrindingSize;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void LibraryRecipe::setGrindingSize( const int nGrindingSize )
{
    const int nTempGrindingSize = std::min( MAX_HEMRO_SCALE, nGrindingSize );

    if ( m_nGrindingSize != nTempGrindingSize )
    {
        m_nGrindingSize = nTempGrindingSize;
        Q_EMIT grindingSizeChanged();
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

QString LibraryRecipe::beanName() const
{
    return m_strBeanName;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void LibraryRecipe::setBeanName( const QString & strBeanName )
{
    if ( m_strBeanName != strBeanName )
    {
        m_strBeanName = strBeanName;
        Q_EMIT beanNameChanged();
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

qreal LibraryRecipe::calibrationSlope() const
{
    return m_nCalibrationSlope;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void LibraryRecipe::setCalibrationSlope( qreal nCalibrationSlope )
{
    const bool bOldCalibrated = calibrated();

    if ( m_nCalibrationSlope != nCalibrationSlope )
    {
        m_nCalibrationSlope = nCalibrationSlope;
        Q_EMIT calibrationOffsetChanged();
    }

    if ( calibrated() != bOldCalibrated )
    {
        Q_EMIT calibratedChanged();
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

int LibraryRecipe::calibrationOffset() const
{
    return m_nCalibrationOffset;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void LibraryRecipe::setCalibrationOffset( int nCalibrationOffset )
{
    if ( m_nCalibrationOffset != nCalibrationOffset )
    {
        m_nCalibrationOffset = nCalibrationOffset;
        Q_EMIT calibrationOffsetChanged();
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

bool LibraryRecipe::calibrated() const
{
    return !qFuzzyIsNull( m_nCalibrationSlope );
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

LibraryGrammage::List LibraryRecipe::grammages() const
{
    return m_grammages;
}

#if QT_VERSION < QT_VERSION_CHECK( 5, 15, 0 )
QVariantList LibraryRecipe::grammagesVariant() const
{
    QVariantList grammagesVariant;
    grammagesVariant.reserve( m_grammages.count() );
    for ( auto * grammage : m_grammages ) {
        grammagesVariant.append( QVariant::fromValue( grammage ) );
    }
    return grammagesVariant;
}

#endif

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void LibraryRecipe::setGrammages( const LibraryGrammage::List & grammages )
{
    if ( m_grammages != grammages )
    {
        m_grammages = grammages;
        Q_EMIT grammagesChanged();
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void LibraryRecipe::addGrammage( LibraryGrammage * pGrammage )
{
    pGrammage->setParent( this );
    m_grammages.append( pGrammage );
    Q_EMIT grammagesChanged();
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////
