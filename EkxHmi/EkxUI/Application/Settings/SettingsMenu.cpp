///////////////////////////////////////////////////////////////////////////////
///
/// @file SettingsMenu.cpp
///
/// @brief Implementation file of class SettingsMenu
///
/// @author Ultratronik GmbH
///         Dornierstr. 9
///         D-82205 Gilching
///         Germany
///         http://www.ultratronik.de
///
/// @author written by Gerd Esser, Forschung & Entwicklung, gesser@ultratronik.de
///
/// @date 25.01.2021
///
/// @copyright Copyright 2021 by Hemro International AG
///            Hemro International AG
///            Länggenstrasse 34
///            CH 8184 Bachenbülach
///            Switzerland
///            Homepage: www.hemrogroup.com
///
///////////////////////////////////////////////////////////////////////////////

#include "SettingsMenu.h"

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

//int SettingsMenu::m_settingEntryTypes_QTypeId = qRegisterMetaType<SettingsMenu::SettingEntryTypes>( "SettingsMenu::SettingEntryTypes" );
//int SettingsMenu::m_actionEntryTypes_QTypeId  = qRegisterMetaType<SettingsMenu::ActionEntryTypes>( "SettingsMenu::ActionEntryTypes" );
//int SettingsMenu::m_toggleSwitchTypes_QTypeId = qRegisterMetaType<SettingsMenu::ToggleSwitchTypes>( "SettingsMenu::ToggleSwitchTypes" );
//int SettingsMenu::m_qmlTypeId                 = qmlRegisterUncreatableType<SettingsMenu>( "MenuEnums", 1, 0, "MenuEnums", "something went wrong" );

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

SettingsMenu::SettingsMenu( QObject * parent )
    : QObject( parent )
{
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

SettingsMenu::~SettingsMenu()
{
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

const QString & SettingsMenu::menuName() const
{
    return m_strMenuName;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void SettingsMenu::setMenuName( const QString & strMenuName )
{
    if ( strMenuName != m_strMenuName )
    {
        m_strMenuName = strMenuName;
        emit menuNameChanged();
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

SettingsMenu::SettingEntryTypes SettingsMenu::menuType() const
{
    return m_nMenuType;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void SettingsMenu::setMenuType( const SettingsMenu::SettingEntryTypes nMenuType )
{
    if ( nMenuType != m_nMenuType )
    {
        m_nMenuType = nMenuType;
        emit menuTypeChanged();
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

bool SettingsMenu::toggleSwitchValue() const
{
    return m_bToggleSwitchValue;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void SettingsMenu::setToggleSwitchValue( const bool bToggleSwitchValue )
{
    if ( bToggleSwitchValue != m_bToggleSwitchValue )
    {
        m_bToggleSwitchValue = bToggleSwitchValue;
        emit toggleSwitchValueChanged();
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

const QString & SettingsMenu::stringValue() const
{
    return m_strValue;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void SettingsMenu::setStringValue( const QString & strValue )
{
    if ( strValue != m_strValue )
    {
        m_strValue = strValue;
        emit stringValueChanged();
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

int SettingsMenu::linkedSettingsState() const
{
    return m_nLinkedSettingsState;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void SettingsMenu::setLinkedSettingsState( const int nLinkedState )
{
    if ( nLinkedState != m_nLinkedSettingsState )
    {
        m_nLinkedSettingsState = nLinkedState;
        emit linkedSettingsStateChanged();
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void SettingsMenu::setActionType( const ActionEntryTypes nActionType )
{
    if ( nActionType != m_nActionType )
    {
        m_nActionType = nActionType;
        emit actionTypeChanged();
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

SettingsMenu::ActionEntryTypes SettingsMenu::actionType() const
{
    return m_nActionType;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void SettingsMenu::setActionValue( const QString & strActionValue )
{
    if ( strActionValue != m_strActionValue )
    {
        m_strActionValue = strActionValue;
        emit actionValueChanged();
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

const QString & SettingsMenu::actionValue() const
{
    return m_strActionValue;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

bool SettingsMenu::menuChoosable() const
{
    return m_bMenuChoosable;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void SettingsMenu::setMenuChoosable( const bool bMenuChoosable )
{
    if ( bMenuChoosable != m_bMenuChoosable )
    {
        m_bMenuChoosable = bMenuChoosable;
        emit menuChooseableChanged();
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

SettingsMenu::ToggleSwitchTypes SettingsMenu::toggleSwitchType() const
{
    return m_nToggleSwitchType;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void SettingsMenu::setToggleSwitchType( const SettingsMenu::ToggleSwitchTypes nToggleSwitchType )
{
    if ( nToggleSwitchType != m_nToggleSwitchType )
    {
        m_nToggleSwitchType = nToggleSwitchType;
        emit toggleSwitchTypeChanged();
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

bool SettingsMenu::userRightsObtained() const
{
    return m_bUserRightsObtained;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void SettingsMenu::setUserRightsObtained( const bool bUserRightsObtained )
{
    if ( bUserRightsObtained != m_bUserRightsObtained )
    {
        m_bUserRightsObtained = bUserRightsObtained;
        emit userRightsObtainedChanged();
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

