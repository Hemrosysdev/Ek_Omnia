///////////////////////////////////////////////////////////////////////////////
///
/// @file BufferedWriter.cpp
///
/// @brief main application entry point of BufferedWriter.
///
/// @author Ultratronik GmbH
///         Dornierstr. 9
///         D-82205 Gilching
///         Germany
///         http://www.ultratronik.de
///
/// @author written by Gerd Esser, Forschung & Entwicklung, gesser@ultratronik.de
///
/// @date 12.04.2023
///
/// @copyright Copyright 2023 by Hemro International AG
///            Hemro International AG
///            Länggenstrasse 34
///            CH 8184 Bachenbülach
///            Switzerland
///            Homepage: www.hemrogroup.com
///
///////////////////////////////////////////////////////////////////////////////

#include "BufferedWriter.h"

#include <QDebug>
#include <QJsonObject>

#include "JsonHelper.h"

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

BufferedWriter::BufferedWriter()
{
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

BufferedWriter::~BufferedWriter()
{
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void BufferedWriter::create( const QString &           strBufferFile,
                             std::function<void (int)> writerFunction,
                             const int                 nThreshold )
{
    m_strBufferFile  = strBufferFile;
    m_writerFunction = writerFunction;
    m_nThreshold     = nThreshold;

    readBufferFile();
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

const QString & BufferedWriter::bufferFile() const
{
    return m_strBufferFile;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void BufferedWriter::addDelta( const int nDelta )
{
    m_nValue += nDelta;

    if ( m_nValue >= m_nThreshold )
    {
        flush();
    }
    else
    {
        writeBufferFile();
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

int BufferedWriter::value() const
{
    return m_nValue;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void BufferedWriter::flush()
{
    m_writerFunction( m_nValue );
    m_nValue = 0;

    writeBufferFile();
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

bool BufferedWriter::writeBufferFile()
{
    QJsonObject obj;

    obj["value"] = m_nValue;

    return JsonHelper::writeJsonFile( m_strBufferFile, obj );
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void BufferedWriter::readBufferFile()
{
    QJsonObject obj;

    if ( JsonHelper::readJsonFile( m_strBufferFile, obj ) )
    {
        m_nValue = obj["value"].toInt();
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////
