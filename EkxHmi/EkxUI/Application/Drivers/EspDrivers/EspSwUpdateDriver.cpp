///////////////////////////////////////////////////////////////////////////////
///
/// @file EspSwUpdateInDriver.cpp
///
/// @brief main application entry point of EspSwUpdateInDriver.
///
/// @author Ultratronik GmbH
///         Dornierstr. 9
///         D-82205 Gilching
///         Germany
///         http://www.ultratronik.de
///
/// @author written by Florian Sonntag, Forschung & Entwicklung, gesser@ultratronik.de
///
/// @date 31.03.2021
///
/// @copyright Copyright 2021 by Hemro International AG
///            Hemro International AG
///            Länggenstrasse 34
///            CH 8184 Bachenbülach
///            Switzerland
///            Homepage: www.hemrogroup.com
///
///////////////////////////////////////////////////////////////////////////////

#include "EspSwUpdateDriver.h"

#include <QDebug>

#include <cstring>

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

EspSwUpdateDriver::EspSwUpdateDriver( const EkxProtocol::DriverId u8DriverId )
    : EspDeviceDriver( u8DriverId )
{
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

EspSwUpdateDriver::~EspSwUpdateDriver()
{
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

int EspSwUpdateDriver::sendTransactionId() const
{
    return m_nSendTransactionId;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

int EspSwUpdateDriver::incSendTransactionId()
{
    m_nSendTransactionId++;

    emit sendTransactionIdChanged();

    return m_nSendTransactionId;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void EspSwUpdateDriver::sendCmd( const EkxProtocol::Payload::SwUpdateCmd nCommand )
{
    m_nSendCmd = nCommand;
    emit sendCmdChanged();

    EkxProtocol::Payload::SwUpdateCommand * pPayload = new EkxProtocol::Payload::SwUpdateCommand();
    pPayload->cmd().setValue( m_nSendCmd );
    pPayload->transactionId().setValue( incSendTransactionId() );
    pPayload->chunkNo().setValue( 0 );

    send( pPayload );
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

EkxProtocol::Payload::SwUpdateCmd EspSwUpdateDriver::sendCmd() const
{
    return m_nSendCmd;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void EspSwUpdateDriver::sendChunk( const int          nChunkNo,
                                   const QByteArray & data )
{
    m_nSendCmd = EkxProtocol::Payload::SwUpdateCmd::Data;
    emit sendCmdChanged();

    EkxProtocol::Payload::SwUpdateCommand * pPayload = new EkxProtocol::Payload::SwUpdateCommand();
    pPayload->cmd().setValue( m_nSendCmd );
    pPayload->transactionId().setValue( incSendTransactionId() );
    pPayload->chunkNo().setValue( nChunkNo );
    std::string strData( data.size(), 0 );
    std::memcpy( strData.data(), data.data(), data.size() );
    pPayload->chunkData().setValue( strData );

    send( pPayload );
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

int EspSwUpdateDriver::statusTransactionId() const
{
    return m_nStatusTransactionId;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void EspSwUpdateDriver::setStatusTransactionId( const int nTransactionId )
{
    if ( nTransactionId != m_nStatusTransactionId )
    {
        m_nStatusTransactionId = nTransactionId;
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

EkxProtocol::Payload::SwUpdateCmd EspSwUpdateDriver::statusCmd() const
{
    return m_nStatusCmd;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void EspSwUpdateDriver::setStatusCmd( const EkxProtocol::Payload::SwUpdateCmd nCmd )
{
    if ( nCmd != m_nStatusCmd )
    {
        m_nStatusCmd = nCmd;
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

bool EspSwUpdateDriver::statusSuccess() const
{
    return m_bStatusSuccess;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void EspSwUpdateDriver::setStatusSuccess( const bool bSuccess )
{
    if ( bSuccess != m_bStatusSuccess )
    {
        m_bStatusSuccess = bSuccess;
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

bool EspSwUpdateDriver::isValid() const
{
    return m_bValid;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void EspSwUpdateDriver::setValid( const bool bValid )
{
    if ( bValid != m_bValid )
    {
        m_bValid = bValid;
        emit statusChanged();
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

const QString & EspSwUpdateDriver::statusSwVersion() const
{
    return m_strStatusSwVersion;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void EspSwUpdateDriver::processMessageFrame( const EkxProtocol::MessageFrame & frame )
{
    const EkxProtocol::Payload::SwUpdateStatus * pPayload = dynamic_cast<const EkxProtocol::Payload::SwUpdateStatus *>( frame.payloadRef().value() );

    if ( pPayload )
    {
        m_bValid               = pPayload->valid().value();
        m_nStatusCmd           = pPayload->cmd().value();
        m_nStatusTransactionId = pPayload->transactionId().value();
        m_bStatusSuccess       = pPayload->success().value();
        m_strStatusSwVersion   = pPayload->swVersionNo().value().c_str();

        emit statusChanged();

        replyAck( frame.driverId().value(),
                  frame.msgCounter().value(),
                  frame.repeatCounter().value() );
    }
    else
    {
        replyNack( frame.driverId().value(),
                   frame.msgCounter().value(),
                   frame.repeatCounter().value(),
                   EkxProtocol::Payload::Nack::NackReason::PayloadBroken );
    }

}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void EspSwUpdateDriver::processAlive( const bool bAlive )
{
    if ( !bAlive )
    {
        setValid( false );
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void EspSwUpdateDriver::setTransactionId( const int nTransactionId )
{
    if ( nTransactionId != m_nSendTransactionId )
    {
        m_nSendTransactionId = nTransactionId;
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void EspSwUpdateDriver::setStatusSwVersion( const QString & strSwVersion )
{
    if ( strSwVersion != m_strStatusSwVersion )
    {
        m_strStatusSwVersion = strSwVersion;
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

