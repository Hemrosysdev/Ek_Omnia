#include "StartStopButtonDriver.h"

#include <QDebug>

#include "EkxProtocol.h"

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

StartStopButtonDriver::StartStopButtonDriver( const EkxProtocol::DriverId u8DriverId )
    : EspDeviceDriver( u8DriverId )
{
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

StartStopButtonDriver::~StartStopButtonDriver()
{
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void StartStopButtonDriver::setButtonState( const ButtonState nButtonState )
{
    if ( m_nButtonState != nButtonState )
    {
        m_nButtonState = nButtonState;
        emit buttonStateChanged( m_nButtonState );
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void StartStopButtonDriver::processAlive( const bool bAlive )
{
    if ( !bAlive )
    {
        setValid( false );
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

StartStopButtonDriver::ButtonState StartStopButtonDriver::buttonState() const
{
    ButtonState nState = Invalid;

    if ( isValid() )
    {
        if ( isPressed() )
        {
            nState = Pressed;
        }
        else
        {
            nState = Released;
        }
    }

    return nState;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

bool StartStopButtonDriver::isPressed() const
{
    return m_bPressed;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void StartStopButtonDriver::processMessageFrame( const EkxProtocol::MessageFrame & frame )
{
    const EkxProtocol::Payload::DiscreteStatus * pPayload = dynamic_cast<const EkxProtocol::Payload::DiscreteStatus *>( frame.payloadRef().value() );

    if ( pPayload )
    {
        m_bValid   = pPayload->valid().value();
        m_bPressed = !pPayload->discreteHigh().value();

        setButtonState( buttonState() );

        replyAck( frame.driverId().value(),
                  frame.msgCounter().value(),
                  frame.repeatCounter().value() );
    }
    else
    {
        replyNack( frame.driverId().value(),
                   frame.msgCounter().value(),
                   frame.repeatCounter().value(),
                   EkxProtocol::Payload::Nack::NackReason::PayloadBroken );
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

bool StartStopButtonDriver::isValid() const
{
    return m_bValid;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void StartStopButtonDriver::setPressed( const bool bPressed )
{
    if ( bPressed != m_bPressed )
    {
        m_bPressed = bPressed;
        setButtonState( buttonState() );
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void StartStopButtonDriver::setValid( const bool bValid )
{
    if ( bValid != m_bValid )
    {
        m_bValid = bValid;
        setButtonState( buttonState() );
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

