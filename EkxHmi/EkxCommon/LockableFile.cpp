///////////////////////////////////////////////////////////////////////////////
///
/// @file LockableFile.cpp
///
/// @brief Implementation file of class LockableFile.
///
/// @author Ultratronik GmbH
///         Dornierstr. 9
///         D-82205 Gilching
///         Germany
///         http://www.ultratronik.de
///
/// @author written by Gerd Esser, Forschung & Entwicklung, gesser@ultratronik.de
///
/// @date 17.02.2023
///
/// @copyright Copyright 2023 by Hemro International AG
///            Hemro International AG
///            Länggenstrasse 34
///            CH 8184 Bachenbülach
///            Switzerland
///            Homepage: www.hemrogroup.com
///
///////////////////////////////////////////////////////////////////////////////

#include "LockableFile.h"

#include <QLockFile>
#include <QFileInfo>
#include <QDebug>
#include <QDir>

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

LockableFile::LockableFile( QObject * parent )
    : QFile( parent )
{
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

LockableFile::LockableFile( const QString & strFileName,
                            QObject *       parent )
    : QFile( parent )
{
    setFileName( strFileName );

    m_pLockFile.reset( new QLockFile( m_strLockFile ) );
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

LockableFile::~LockableFile()
{
    m_pLockFile = nullptr;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void LockableFile::setFileName( const QString & strFileName )
{
    QFile::setFileName( strFileName );

    QFileInfo fi( strFileName );

    m_strLockFile = QDir::tempPath() + "/" + fi.baseName() + ".lock";
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

bool LockableFile::open( OpenMode flags )
{
    bool bSuccess = lock();

    if ( bSuccess )
    {
        bSuccess = QFile::open( flags );
    }

    return bSuccess;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void LockableFile::close()
{
    flush();
    QFile::close();
    unlock();
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

bool LockableFile::remove()
{
    bool bSuccess = lock();

    if ( bSuccess )
    {
        bSuccess = QFile::remove();
    }

    return bSuccess;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

bool LockableFile::remove( const QString & strFileName )
{
    return LockableFile( strFileName ).remove();
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

const QString & LockableFile::lockFile() const
{
    return m_strLockFile;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

bool LockableFile::lock()
{
#ifdef __linux__
    bool bSuccess = false;

    if ( !QFileInfo::exists( fileName() ) )
    {
        bSuccess = true;
    }
    else
    {
        bSuccess = m_pLockFile->tryLock( 1000 );

        if ( !bSuccess )
        {
            qCritical() << "LockableFile::lock() cannot retrieve lock for file"
                        << fileName()
                        << "on"
                        << m_strLockFile;
        }
    }

    return bSuccess;
#else
    return true;
#endif
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void LockableFile::unlock()
{
    m_pLockFile->unlock();
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////
