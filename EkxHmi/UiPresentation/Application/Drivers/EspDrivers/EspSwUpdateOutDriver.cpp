///////////////////////////////////////////////////////////////////////////////
///
/// @file EspSwUpdateOutDriver.cpp
///
/// @brief main application entry point of EspSwUpdateOutDriver.
///
/// @author Ultratronik GmbH
///         Dornierstr. 9
///         D-82205 Gilching
///         Germany
///         http://www.ultratronik.de
///
/// @author written by Florian Sonntag, Forschung & Entwicklung, gesser@ultratronik.de
///
/// @date 31.03.2021
///
/// @copyright Copyright 2021 by Hemro International AG
///            Hemro International AG
///            Länggenstrasse 34
///            CH 8184 Bachenbülach
///            Switzerland
///            Homepage: www.hemrogroup.com
///
///////////////////////////////////////////////////////////////////////////////

#include "EspSwUpdateOutDriver.h"

#include <QDebug>

#include "EspSwUpdateOut.h"

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

EspSwUpdateOutDriver::EspSwUpdateOutDriver( QObject *parent )
    : QObject( parent )
{
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

EspSwUpdateOutDriver::~EspSwUpdateOutDriver()
{
    disconnectInterface();
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void EspSwUpdateOutDriver::connectInterface( EspSwUpdateOut *pEspSwUpdateOut )
{
    if ( m_pSwUpdateOut != pEspSwUpdateOut )
    {
        disconnectInterface();
        m_pSwUpdateOut = pEspSwUpdateOut;
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void EspSwUpdateOutDriver::disconnectInterface( )
{
    // don't zero the values - continuos values are needed esp. for SW update reboot
    //        ThisCurrentTransId = -1;
    //        ThisCommand        = 0;

    m_pSwUpdateOut = nullptr;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

int EspSwUpdateOutDriver::transactionId() const
{
    return m_nTransactionId;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void EspSwUpdateOutDriver::setTransactionId(const int nTransactionId )
{
    if ( nTransactionId != m_nTransactionId )
    {
        m_nTransactionId = nTransactionId;

        emit transactionIdChanged();
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

int EspSwUpdateOutDriver::incTransactionId( void )
{
    m_nTransactionId++;

    emit transactionIdChanged();

    return m_nTransactionId;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

int EspSwUpdateOutDriver::command() const
{
    return m_nCommand;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void EspSwUpdateOutDriver::setCommand( const int nCommand )
{
    if ( m_pSwUpdateOut )
    {
        m_nCommand = nCommand;

        incTransactionId();
        m_pSwUpdateOut->setCommand( m_nCommand, m_nTransactionId );

        emit commandChanged();
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void EspSwUpdateOutDriver::setData( const int nChunkNo,
                                    const int nChunkSize,
                                    const QByteArray & data )
{
    if ( m_pSwUpdateOut )
    {
        incTransactionId();
        m_pSwUpdateOut->setData( nChunkNo, nChunkSize, data, m_nTransactionId );
        m_nCommand = m_pSwUpdateOut->command();
        emit commandChanged();
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

