///////////////////////////////////////////////////////////////////////////////
///
/// @file WifiDriver.cpp
///
/// @brief main application entry point of WifiDriver.
///
/// @author Ultratronik GmbH
///         Dornierstr. 9
///         D-82205 Gilching
///         Germany
///         http://www.ultratronik.de
///
/// @author written by Gerd Esser, Forschung & Entwicklung, gesser@ultratronik.de
///
/// @date 10.02.2021
///
/// @copyright Copyright 2021 by Hemro International AG
///            Hemro International AG
///            Länggenstrasse 34
///            CH 8184 Bachenbülach
///            Switzerland
///            Homepage: www.hemrogroup.com
///
///////////////////////////////////////////////////////////////////////////////

#include "WifiDriver.h"

#include <QDebug>
#include <QQmlContext>
#include <QQmlEngine>

#include "EspWifiIn.h"
#include "EspWifiOut.h"
#include "StandbyController.h"
#include "MainStatemachine.h"

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

WifiDriver::WifiDriver( QQmlEngine* pEngine,
                        MainStatemachine *pMainStatemachine )
    : QObject( pMainStatemachine )
    , m_pMainStatemachine( pMainStatemachine )
{
    pEngine->rootContext()->setContextProperty( "wifiDriver", this );
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

WifiDriver::~WifiDriver()
{
    disconnectInInterface();

    if ( m_pEspWifiOut )
    {
        m_pEspWifiOut = nullptr;
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void WifiDriver::create()
{
    connect( m_pMainStatemachine->standbyController(), &StandbyController::standbyChanged, this, &WifiDriver::processStandbyChanged );
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void WifiDriver::connectInInterface( EspWifiIn * pWifiIn )
{
    if ( m_pEspWifiIn != pWifiIn )
    {
        disconnectInInterface();
        m_pEspWifiIn = pWifiIn;

        if ( pWifiIn )
        {
            connect( m_pEspWifiIn, &EspDataInterface::dataChanged, this, &WifiDriver::processDataChanged );
            connect( m_pEspWifiIn, &EspDataInterface::validChanged, this, &WifiDriver::processValidChanged );

            setConnection( "Off" );
        }
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void WifiDriver::disconnectInInterface( )
{
    setConnection( "Off" );
    setConnectionValid( false );

    m_pEspWifiIn = nullptr;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void WifiDriver::connectOutInterface( EspWifiOut* pWifiOut )
{
    m_pEspWifiOut = pWifiOut;
    updateWifiActive();
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void WifiDriver::disconnectOutInterface()
{
    m_pEspWifiOut = nullptr;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

bool WifiDriver::isActive() const
{
    return m_bActive;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

const QString &WifiDriver::connection() const
{
    return m_strWifiConnection;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void WifiDriver::setConnection( const QString & strConnection )
{
    if ( strConnection != m_strWifiConnection )
    {
        m_strWifiConnection = strConnection;

        emit connectionChanged();
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

bool WifiDriver::isConnectionValid() const
{
    return m_bConnectionValid;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void WifiDriver::setConnectionValid( const bool bValid )
{
    if ( bValid != m_bConnectionValid )
    {
        m_bConnectionValid = bValid;

        emit connectionValidChanged();
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void WifiDriver::processDataChanged( EspDataInterface * pData )
{
    EspWifiIn * pWifiIn = dynamic_cast<EspWifiIn*>( pData );

    if ( pWifiIn )
    {
        setConnection( "Off" );
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void WifiDriver::processValidChanged( EspDataInterface * pData )
{
    EspWifiIn * pWifiIn = dynamic_cast<EspWifiIn*>( pData );

    if ( pWifiIn )
    {
        setConnectionValid( pWifiIn->isValid() );
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void WifiDriver::processStandbyChanged( const bool bActive )
{
    Q_UNUSED( bActive )

    updateWifiActive();
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void WifiDriver::updateWifiActive()
{
    if ( m_pEspWifiOut )
    {
        if ( isActive() && !m_pMainStatemachine->standbyController()->isStandbyActive() )
        {
            m_pEspWifiOut->setActive( true );
        }
        else
        {
            m_pEspWifiOut->setActive( false );
        }
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void WifiDriver::setActive( const bool bActive )
{
    if ( m_bActive != bActive )
    {
        m_bActive = bActive;
        emit activeChanged();

        updateWifiActive();
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void WifiDriver::setIsAccesspoint( const bool bIsAccesspoint )
{
    if( m_pEspWifiOut )
    {
        m_pEspWifiOut->setIsAccesspoint( bIsAccesspoint );
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void WifiDriver::setApSsid( const QString & strApSsid )
{
    if( m_pEspWifiOut )
    {
        m_pEspWifiOut->setApSsid( strApSsid );
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void WifiDriver::setApPw( const QString & strApPw )
{
    if( m_pEspWifiOut )
    {
        m_pEspWifiOut->setApPassword( strApPw );
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void WifiDriver::setStaSsid( const QString & strStaSsid )
{
    if( m_pEspWifiOut )
    {
        m_pEspWifiOut->setStaSsid( strStaSsid );
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void WifiDriver::setStaPw( const QString & strStaPw )
{
    if( m_pEspWifiOut )
    {
        m_pEspWifiOut->setStaPassword( strStaPw );
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void WifiDriver::setWifiValid( const bool bValid )
{
    if( m_pEspWifiOut )
    {
        m_pEspWifiOut->setValid( bValid );
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

bool WifiDriver::isApConnected( ) const
{
    bool bApConnected = false;

    if ( m_pEspWifiIn )
    {
        bApConnected = m_pEspWifiIn->isValid();
    }

    return bApConnected;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////
