///////////////////////////////////////////////////////////////////////////////
///
/// @file SettingsMenu.cpp
///
/// @brief Implementation file of class SettingsMenu
///
/// @author Ultratronik GmbH
///         Dornierstr. 9
///         D-82205 Gilching
///         Germany
///         http://www.ultratronik.de
///
/// @author written by Gerd Esser, Forschung & Entwicklung, gesser@ultratronik.de
///
/// @date 25.01.2021
///
/// @copyright Copyright 2021 by Hemro International AG
///            Hemro International AG
///            Länggenstrasse 34
///            CH 8184 Bachenbülach
///            Switzerland
///            Homepage: www.hemrogroup.com
///
///////////////////////////////////////////////////////////////////////////////

#include "SettingsMenu.h"
#include <QtQml>

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

int SettingsMenu::m_settingEntryTypes_QTypeId = qRegisterMetaType<SettingsMenu::SettingEntryTypes>( "SettingsMenu::SettingEntryTypes" );
int SettingsMenu::m_actionEntryTypes_QTypeId  = qRegisterMetaType<SettingsMenu::ActionEntryTypes>( "SettingsMenu::ActionEntryTypes" );
int SettingsMenu::m_toggleswitchTypes_QTypeId = qRegisterMetaType<SettingsMenu::ToggleswitchTypes>( "SettingsMenu::ToggleswitchTypes" );
int SettingsMenu::m_qmlTypeId                 = qmlRegisterUncreatableType<SettingsMenu>( "MenuEnums", 1, 0, "MenuEnums", "something went wrong" );

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

SettingsMenu::SettingsMenu(QObject *parent)
    : QObject(parent)
    , m_menuName("")
    , m_menuType(SettingEntryTypes::ENTRYTYPE_MAINENTRY)
    , m_toggleswitchValue(false)
    , m_toggleswitchType(ToggleswitchTypes::TOGGLESWITCH_FOR_NONE)
    , m_stringValue("")
    , m_linkedSettingState(0)
    , m_actionType(ActionEntryTypes::ACTIONTYPE_NONE)
    , m_actionValue("")
    , m_menuChoosable(true)
    , m_userRightsObtained(true)
{
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

SettingsMenu::~SettingsMenu()
{
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

QString SettingsMenu::getMenuName() const
{
    return m_menuName;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void SettingsMenu::setMenuName(QString newMenuName)
{
    if ( newMenuName != m_menuName )
    {
        m_menuName = newMenuName;
        emit menuNameChanged();
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

SettingsMenu::SettingEntryTypes SettingsMenu::getMenuType() const
{
    return m_menuType;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void SettingsMenu::setMenuType(SettingsMenu::SettingEntryTypes newMenuType)
{
    if ( newMenuType != m_menuType )
    {
        m_menuType = newMenuType;
        emit menuTypeChanged();
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

int SettingsMenu::getToggleswitchValue() const
{
    return m_toggleswitchValue;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void SettingsMenu::setToggleswitchValue(int newToggleswitchValue)
{
    if ( newToggleswitchValue != m_toggleswitchValue )
    {
        m_toggleswitchValue = newToggleswitchValue;
        emit toggleswitchValueChanged();
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

QString SettingsMenu::getStringValue() const
{
    return m_stringValue;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void SettingsMenu::setStringValue(QString newMenuValue)
{
    if ( newMenuValue != m_stringValue )
    {
        m_stringValue = newMenuValue;
        emit stringValueChanged();
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

int SettingsMenu::getLinkedSettingState() const
{
    return m_linkedSettingState;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void SettingsMenu::setLinkedSettingState(int newLinkedMenu)
{
    if ( newLinkedMenu != m_linkedSettingState )
    {
        m_linkedSettingState = newLinkedMenu;
        emit linkedSettingStateChanged();
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void SettingsMenu::setActionType( SettingsMenu::ActionEntryTypes newActionType )
{
    if ( newActionType != m_actionType )
    {
        m_actionType = newActionType;
        emit actionTypeChanged();
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

SettingsMenu::ActionEntryTypes SettingsMenu::getActionType() const
{
    return m_actionType;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void SettingsMenu::setActionValue( QString newActionValue )
{
    if ( newActionValue != m_actionValue )
    {
        m_actionValue = newActionValue;
        emit acionValueChanged();
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

QString SettingsMenu::getActionValue() const
{
    return m_actionValue;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

bool SettingsMenu::getMenuChoosable() const
{
    return m_menuChoosable;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void SettingsMenu::setMenuChoosable( bool newMenuChoosable  )
{
    if ( newMenuChoosable != m_menuChoosable )
    {
        m_menuChoosable = newMenuChoosable;
        emit menuChooseableChanged();
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

SettingsMenu::ToggleswitchTypes  SettingsMenu::getToggleswitchType() const
{
    return m_toggleswitchType;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void SettingsMenu::setToggleswitchType( SettingsMenu::ToggleswitchTypes newToggleswitchType  )
{
    if ( newToggleswitchType != m_toggleswitchType )
    {
        m_toggleswitchType = newToggleswitchType;
        emit toggleswitchTypeChanged();
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

bool SettingsMenu::getUserRightsObtained() const
{
    return m_userRightsObtained;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void SettingsMenu::setUserRightsObtained( bool newUserRightsObtained  )
{
    if ( newUserRightsObtained != m_userRightsObtained )
    {
        m_userRightsObtained = newUserRightsObtained;
        emit userRightsObtainedChanged();
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

