///////////////////////////////////////////////////////////////////////////////
///
/// @file TimeRecipe.cpp
///
/// @brief Implementation file of class TimeRecipe.
///
/// @author Ultratronik GmbH
///         Dornierstr. 9
///         D-82205 Gilching
///         Germany
///         http://www.ultratronik.de
///
/// @author written by Florian Sonntag, Forschung & Entwicklung, fsonntag@ultratronik.de
///
/// @date 31.03.2021
///
/// @copyright Copyright 2021 by Hemro International AG
///            Hemro International AG
///            Länggenstrasse 34
///            CH 8184 Bachenbülach
///            Switzerland
///            Homepage: www.hemrogroup.com
///
///////////////////////////////////////////////////////////////////////////////

#include "TimeRecipe.h"

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

TimeRecipe::TimeRecipe(QObject *parent)
    : QObject( parent )
{
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

TimeRecipe::~TimeRecipe()
{
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

int TimeRecipe::recipeBigValue() const
{
    return m_nRecipeBigValue;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void TimeRecipe::setRecipeBigValue( const int nRecipeBigValue )
{
    if ( nRecipeBigValue != m_nRecipeBigValue )
    {
        m_nRecipeBigValue = nRecipeBigValue;

        emit recipeBigValueChanged();
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

int TimeRecipe::recipeCommaValue() const
{
    return m_nRecipeCommaValue;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void TimeRecipe::setRecipeCommaValue( const int nRecipeCommaValue )
{
    if ( nRecipeCommaValue != m_nRecipeCommaValue )
    {
        m_nRecipeCommaValue = nRecipeCommaValue;

        emit recipeCommaValueChanged();
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

int TimeRecipe::dddBigValue() const
{
    return m_nDddBigValue;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void TimeRecipe::setDddBigValue( const int nDddBigValue )
{
    if ( nDddBigValue != m_nDddBigValue )
    {
        m_nDddBigValue = nDddBigValue;

        emit dddBigValueChanged();
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

int TimeRecipe::dddCommaValue() const
{
    return m_nDddCommaValue;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void TimeRecipe::setDddCommaValue( const int nDddCommaValue )
{
    if ( nDddCommaValue != m_nDddCommaValue )
    {
        m_nDddCommaValue = nDddCommaValue;

        emit dddCommaValueChanged();
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

int TimeRecipe::portaFilterIndex() const
{
    return m_nPortaFilterIndex;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void TimeRecipe::setPortaFilterIndex( const int nPortaFilterIndex )
{
    if ( nPortaFilterIndex != m_nPortaFilterIndex )
    {
        m_nPortaFilterIndex = nPortaFilterIndex;

        emit portaFilterIndexChanged();
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void TimeRecipe::setRecipeIconOn( const bool bRecipeIconOn )
{
    if ( bRecipeIconOn != m_bRecipeIconOn )
    {
        m_bRecipeIconOn = bRecipeIconOn;

        emit recipeIconOnChanged();
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

bool TimeRecipe::recipeIconOn() const
{
    return m_bRecipeIconOn;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void TimeRecipe::setShowCoarseness( const bool bShow )
{
    if ( m_bShowCoarseness != bShow )
    {
        m_bShowCoarseness = bShow;
        emit showCoarsenessChanged();
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

bool TimeRecipe::showCoarseness() const
{
    return m_bShowCoarseness;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

void TimeRecipe::setUuid( const QString &strUuid )
{
    if ( m_strUuid != strUuid )
    {
        m_strUuid = strUuid;
        emit uuidChanged();
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

const QString &TimeRecipe::uuid() const
{
    return m_strUuid;
}

///////////////////////////////////////////////////////////////////////////////
//
//
///////////////////////////////////////////////////////////////////////////////

